// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RottenPotatoes.Migrations
{
    [DbContext(typeof(PotatoContext))]
    [Migration("20250525112411_Updated Migration")]
    partial class UpdatedMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Movie", b =>
                {
                    b.Property<int>("Movie_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Production_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScreenWriter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Movie_ID");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("RottenPotatoes.Models.Permission", b =>
                {
                    b.Property<int>("Permission_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Permission_ID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("RottenPotatoes.Models.Review", b =>
                {
                    b.Property<int>("Review_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Movie_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Review_ID");

                    b.HasIndex("Movie_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RottenPotatoes.Models.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login_Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password_Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Permission_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("User_ID");

                    b.HasIndex("Permission_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Watchlist", b =>
                {
                    b.Property<int>("Watchlist_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Added_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Movie_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Watchlist_ID");

                    b.HasIndex("Movie_ID");

                    b.ToTable("Watchlist");
                });

            modelBuilder.Entity("RottenPotatoes.Models.Review", b =>
                {
                    b.HasOne("Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movie_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RottenPotatoes.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RottenPotatoes.Models.User", b =>
                {
                    b.HasOne("RottenPotatoes.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("Permission_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Watchlist", b =>
                {
                    b.HasOne("Movie", "Movie")
                        .WithMany("Watchlists")
                        .HasForeignKey("Movie_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movie", b =>
                {
                    b.Navigation("Watchlists");
                });
#pragma warning restore 612, 618
        }
    }
}
